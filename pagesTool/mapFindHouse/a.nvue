

<template>
    <div class="cont-view">
        <map :style="{width: '750rpx', height: mapHeight}"
             v-if="showMap" ref="mapFindHouseId"
             @markertap="calloutTap"
             id="mapFindHouseId" @callouttap="calloutTap" @tap="tapMap"
             :markers="markers" @regionchange="regionChange"
             :longitude="lng" :latitude="lat">
        </map>
        <image :style="{width: '750rpx', height: mapHeight}"
               v-if="!showMap"
               resize="cover" :src="staticMapImg"></image>

        <!--底部按钮-->
        <div ref="testdiv" class="dragLayer" @touchmove.stop.prevent=""
             @click.stop="" :style="{height: bottomHeight+'px'}">
            <div class="nav-view">
                <div :class="[mapBtnType===key?'nav-item-active':'']"
                     @click.stop="changeCaseType(item, item.isInit)"
                     class="nav-item" v-for="(item, key) in mapBtnObj" :key="index">
                    <text :class="[mapBtnType===key?'nav-text-active':'']"
                          class="nav-text">{{ item.text }}</text>
                </div>
            </div>

            <div class="btn-view">
                <image resize="cover" class="icon-btn" :src="mapBtnObj[mapBtnType].icon"></image>
                <text class="btn-text">{{ mapBtnObj[mapBtnType].btnText }}</text>
            </div>
        </div>

        <!--房源-->
        <div ref="house" class="house-cont"
             @click.stop=""
             @touchstart="handleTouchStart"
             @touchend="handleTouchEnd"
             @touchmove.stop.prevent=""
             :style="{height:houseHeight+'px',bottom:-houseHeight+'px'}">
            <div ref="houseTop" class="house-top">
                <text text-overflow="ellipsis"
                      word-wrap="nowrap"
                      class="house-name">{{ clickBuildInfoMap[mapBtnType].name }}</text>

                <div @click.stop="changeAllScreen" class="house-more-down-view">
                    <image class="house-more-down" ref="screenBtn"
                           src="http://cdn.haofang.net/static/uuminiapp/new_images/icon_chkm_important.png?t=20180427"></image>
                </div>

                <div class="house-hx" @click.stop="chooseHx">
                    <text class="house-hx-text">{{clickBuildInfoMap[mapBtnType].btnText}}</text>
                    <image class="house-hx-img" src="http://cdn.haofang.net/static/uuminiapp/new_images/down_ac_icon.png?t=20180427"></image>
                </div>
            </div>

            <!--户型筛选-->
            <div class="hx-view" @click.stop="closeHxTc"
                 ref="hxTc" v-if="showHxTc"
                 @touchmove.stop.prevent="">
                <list ref="hxList" class="hx-list" :style="{top: hxListTop+'px'}"
                      v-if="showHxList">
                    <cell class="hx-item"
                          @click.stop="clickHx(item)"
                          v-for="(item,index) in chooseList"
                          :key="index">
                        <text :class="[item.id==clickBuildInfoMap[mapBtnType].id?'hx_choose_active':'']"
                              class="hx-text">{{ item.text }}</text>
                    </cell>
                </list>
            </div>

            <scroller class="house-info"
                      :scrollable="scrollable"
                      show-scrollbar="false"
                      :style="{height: (houseHeight-houseTopHeight-10)+'px'}"
                      @scroll="scrollHandler"
                      offset-accuracy="1">
                <div class="load-more" v-if="!erHouseList">
                    <text class="load-more-text">加载中...</text>
                </div>

                <villageExpert :caseType="mapBtnType == 'erHouse' ? 1: 2"
                               :width="670" :marginTop="20"
                               v-if="erHouseList"
                               :item="villageExpertItem"></villageExpert>

                <block v-for="(item, index) in (erHouseList||[])" :key="index">
                    <er-house-list-item :width="'670'" :item="item"></er-house-list-item>
                </block>

                <div class="no-data-view" v-if="erHouseList && erHouseList.length === 0">
                    <image class="no-data-img" src="http://cdn.haofang.net/static/uuminiapp/map/no-data.png"></image>
                    <text class="no-data-text">暂无数据</text>
                </div>

                <loading v-if="haveMoreData" @loading="onLoading"
                         class="load-more"
                         :display="refreshing ? 'show' : 'hide'">
                    <loading-indicator class="indicator"></loading-indicator>
                    <text class="load-more-text">加载中...</text>
                </loading>
                <div class="load-more" v-if="erHouseList && erHouseList.length>0 && !haveMoreData">
                    <text class="load-more-text">没有更多数据了！</text>
                </div>
            </scroller>
        </div>
    </div>
</template>

<script>
    import Binding from 'weex-bindingx';
    const domModule = weex.requireModule('dom');
    const animation = weex.requireModule('animation');
    import {Notification} from "../../utils/Notification.js";
    import {Notify} from "../../utils/Notify.js";
    import {GpsInfoModel} from "../../model/GpsInfoModel.js";
    import {SetMap, SetMapItem, MapFindeHouseItem} from "../../utils/SetMap.js";
    import {GetMpaFindHouse} from "../../net/GetMpaFindHouse.js";
    import erHouseListItem from "../../static/app-plus/components/erHouseListItem.vue";
    import {ErHouseListItem, HouseListAgentItem} from "../../utils/Const";
    import {GetListDataForMap} from "../../net/GetNewHouseList";
    import scrollLoading from "../../components/scrollLoading.vue";
    import {Const} from "../../utils/Const.js";
    import villageExpert from "../../static/app-plus/components/villageExpert.vue";
    import {DifferenceApi} from "../../utils/DifferenceApi";

    class PrivateData {
        static timeOutVal = null;
        static mapCtx = null;
        static map = null;
        static cityId = 1;
        static caseType = 1;
        static pageNum = 1;
        static pageSize = 30;
        // 是否在绘制页面中
        static drawPageIng = false;
        static screenHeight = 0;
        static screenWidth = 0;

        // 房源
        static houseListConfig = {
            erHouse: {
                currentPage: 1,
                limit: 10,
                buildId: ""
            },
            zhengZu: {
                currentPage: 1,
                limit: 10,
                buildId: ""
            }
        };
        static houseMinHeight = uni.upx2px(750);
        static isAllScreen = false; // 是否是全屏
        static drawHouseListIng = false; // 是否再渲染房源列表中

        // 手指滑动
        static startX = 0;
        static startY = 0;
        static isTop = false;
        static contentOffsetY = 10;
        static markerMap = new Map();
        static markers = [];

        static maxLat = 0;
        static maxLng = 0;
        static minLat = 0;
        static minLng = 0;

        static x = 0;
        static y = 0;
        static isInAnimation = false;
        static gesToken = 0;
    }

    export default {
        components: {
            erHouseListItem,
            scrollLoading,
            villageExpert,
        },
        data() {
            return {
                markers: [],
                lat: null,
                lng: null,
                mapHeight: "1334rpx",
                bottomHeight: uni.upx2px(220),

                // button 配置
                mapBtnObj: {
                    zhengZu: {
                        text: "整租", type: "zhengZu", caseType: 2,
                        btnText: "特权找好房", isInit: 2,
                        icon: "http://cdn.haofang.net/static/uuminiapp/new_images/vipInMap_2x.png"
                    },
                    erHouse: {
                        text: "二手房", type: "erHouse", caseType: 1,
                        btnText: "特权找好房，成交抽佣金全返奖励",
                        isInit: 2,
                        icon: "http://cdn.haofang.net/static/uuminiapp/new_images/vipInMap_2x.png"
                    },
                    newHouse: {
                        text: "新房", type: "newHouse", caseType: 6,
                        btnText: "特权找好房", isInit: 2,
                        icon: "http://cdn.haofang.net/static/uuminiapp/new_images/vipInMap_2x.png"
                    }
                },
                mapBtnType: "erHouse",

                // 小区专家信息
                villageExpertItem: {},
                // 户型选择
                chooseList: [],
                // 房源高度
                houseHeight: PrivateData.houseMinHeight,
                houseTopHeight: 0, // 弹窗顶部的高度
                clickBuildInfoMap: {
                    erHouse: {
                        name: "",
                        id: "",
                        btnText: "户型筛选",
                        defaultText: "户型筛选"
                    },
                    zhengZu: {
                        name: "",
                        id: "",
                        btnText: "户型筛选",
                        defaultText: "户型筛选"
                    },
                    newHouse: {
                        name: "",
                        id: "",
                        btnText: "户型筛选",
                        defaultText: "户型筛选"
                    }
                },
                erHouseList: null,
                isAllScreen: false,
                haveMoreData: true,
                houseChooseShow: false,
                biddBuilder: {}, // 经纪人信息
                refreshing: false, // 是否正在下拉刷新
                // 初始化禁止滑动
                scrollable: false,
                // 显示户型弹窗
                showHxTc: false,
                showHxList: false,
                hxListTop: 0,
                staticMapImg: "",
                showMap: true
            }
        },
        beforeCreate() {
            domModule.addRule('fontFace', {
                fontFamily: "unibtn",
                'src': "url('https://at.alicdn.com/t/font_1334468_brmm47kibjk.ttf')"
            });
        },
        onLoad() {
            PrivateData.drawPageIng = true;
            // 监听gps变化
            new Notification().addObserver(this, "GpsChanged", Notify.GpsChanged.Name);
            this.initChooseList();
        },
        onShow() {
            PrivateData.drawPageIng = true;
            setInterval(() => {
                PrivateData.drawPageIng = false;
            }, 1500);
        },
        onReady() {
            PrivateData.mapCtx = uni.createMapContext('mapFindHouseId', this);
            domModule.getComponentRect(this.$refs.houseTop, option => {
                this.houseTopHeight = option.size.height;
            });
            uni.getSystemInfo({
                success: (res) => {
                    PrivateData.screenHeight = res.windowHeight;
                    PrivateData.screenWidth = res.windowWidth;
                    this.houseHeight = PrivateData.screenHeight*8/9;
                    PrivateData.houseMinHeight = PrivateData.screenHeight*(4.5)/9;
                    domModule.getComponentRect(this.$refs.testdiv, option => {
                        this.mapHeight = res.windowHeight - option.size.height - 5;
                    });
                    PrivateData.y = -PrivateData.houseMinHeight;
                    this.upGpsInfo();
                }
            });
        },
        onHide() {
            PrivateData.drawPageIng = false;
        },
        onUnload() {
            PrivateData.drawPageIng = false;
            // 反注册通知
            new Notification().removeObserverAllNotification(this);
        },
        methods: {
            getEl(el) {
                if (typeof el === 'string' || typeof el === 'number') return el;
                if (WXEnvironment) {
                    return el.ref;
                }

                return el instanceof HTMLElement ? el : el.$el;
            },

            // gps变化回调
            GpsChanged() {
                this.upGpsInfo();
            },
            // 更新定位信息
            upGpsInfo() {
                if (!new GpsInfoModel().getModel("gpsInfo")) return;

                let item = new GpsInfoModel().getModel("gpsInfo");
                if (!item.lat || !item.lng) return;

                let cityInfo = new GpsInfoModel().getModel("cityInfo");
                if (cityInfo && cityInfo.cityId) {
                    PrivateData.cityId = cityInfo.cityId || "";
                }
                this.lat = item.lat || null;
                this.lng = item.lng || null;
                this.initMap();
            },
            // 初始化地图
            initMap() {
                let initMapItem = new SetMapItem();
                initMapItem.id = "mapFindHouseId";
                PrivateData.mapVal = new SetMap(initMapItem);
                this.changeCaseType(this.mapBtnObj[this.mapBtnType], 1);
            },
            // 初始化筛选列表
            initChooseList() {
                if (this.mapBtnType.indexOf("erHouse") >= 0) {
                    this.chooseList = Const.roomList;
                }
                if (this.mapBtnType.indexOf("zhengZu") >= 0) {
                    this.chooseList = Const.roomList;
                }
            },

            // 切换房源类型
            changeCaseType(item, isInit = 2) {
                if (item.type === this.mapBtnType && isInit !== 2) {
                    return;
                }

                this.mapBtnType = item.type;
                PrivateData.caseType = item.caseType;
                this.showMap = false;
                setTimeout(() => {
                    this.markers = [];
                    PrivateData.markerMap = new Map();
                    PrivateData.markers = [];
                    this.showMap = true;
                    this.initChooseList();
                    setTimeout(() => {
                        this.regionChange();
                    }, 100);
                }, 100);
            },
            regionChange() {
                clearTimeout(PrivateData.timeOutVal);
                PrivateData.timeOutVal = null;
                PrivateData.timeOutVal = setTimeout(() => {
                    if (!PrivateData.timeOutVal) return;

                    this.initMapHouseList();
                }, 500);
            },
            initMapHouseList() {
                uni.setNavigationBarTitle({title: "加载中..."});
                PrivateData.mapVal.getRegion(PrivateData.mapCtx)
                .then(res => {
                    PrivateData.minLat = res.minLat;
                    PrivateData.minLng = res.minLng;
                    PrivateData.maxLat = res.maxLat;
                    PrivateData.maxLng = res.maxLng;
                    this.staticMapImg = "https://apis.map.qq.com/ws/staticmap/v2/?center="
                        + (res.minLat+(res.maxLat-res.minLat)/2) + ","
                        + (res.minLng+(res.maxLng-res.minLng)/2)
                        + "&zoom=16&scale=2&"
                        + (res.minLat+(res.maxLat-res.minLat)/2) + ","
                        + (res.minLng+(res.maxLng-res.minLng)/2)
                        + "&key=DGFBZ-3IFW2-PDEUL-CBLCE-XOSYK-K5B5I&size="
                        + parseInt(PrivateData.screenWidth)
                        + "*" + parseInt(this.mapHeight);
                    return new GetMpaFindHouse({
                        cityId: PrivateData.cityId,
                        beginLatitude: res.minLat,
                        beginLongitude: res.minLng,
                        endLatitude: res.maxLat,
                        endLongitude: res.maxLng,
                        caseType: PrivateData.caseType,
                        pageNum: PrivateData.pageNum,
                        pageSize: PrivateData.pageSize
                    }).send();
                })
                .then(res => {
                    let list = res && res.data ? res.data.list || [] : [];
                    let itemList = [];
                    for (let dataItem of list) {
                        if (!dataItem.buildId || !dataItem.positionX || !dataItem.positionY) continue;

                        let item = new MapFindeHouseItem();
                        // item.lat = parseFloat(dataItem.positionX);
                        // item.lng = parseFloat(dataItem.positionY);
                        item.lat = dataItem.positionX;
                        item.lng = dataItem.positionY;
                        item.id = dataItem.buildId;
                        item.alpha = 0;
                        item.callout_content = dataItem.buildName || "";
                        item.callout_color = "#101d36";
                        item.callout_fontSize = uni.upx2px(24);
                        item.callout_borderRadius = uni.upx2px(50);
                        item.callout_bgColor = "#ffffff";
                        item.callout_padding = uni.upx2px(20);
                        item.callout_display = "ALWAYS";
                        item.callout_textAlign = "center";
                        itemList.push(item);
                    }
                    return PrivateData.mapVal.setMapFindMarkers(itemList);
                })
                .then(res => {
                    for (let info of res) {
                        if (PrivateData.markerMap.has(info.id)) {
                            continue;
                        }

                        PrivateData.markerMap.set(info.id, info);
                        PrivateData.markers.push(info);
                    }
                    this.markers = PrivateData.markers;
                    uni.setNavigationBarTitle({title: `该区域共有${res.length}个小区`});
                })
                .catch(err => {
                    new DifferenceApi().showToast("获取附近房源失败啦");
                    uni.setNavigationBarTitle({title: `地图找房`});
                });
            },

            // 气泡点击
            calloutTap(item) {
                PrivateData.isTop = false;
                this.markerPageTo(item.detail.markerId);
                if (this.mapBtnType === "newHouse") return;

                let moveNum = -PrivateData.houseMinHeight;
                PrivateData.isAllScreen = false;
                animation.transition(this.$refs.house, {
                    styles:{
                        transform: `translateY(${moveNum}px)`,
                        transformOrigin: 'center center'
                    },
                    duration: 400,
                    timingFunction: 'ease',
                    delay: 0
                });
            },
            // 点击地图
            tapMap() {
                PrivateData.isTop = false;
                animation.transition(this.$refs.screenBtn, {
                    styles:{
                        transform: `rotate(0deg)`,
                        transformOrigin: 'center center'
                    },
                    duration: 200,
                    timingFunction: 'ease',
                    delay: 0
                });
                domModule.getComponentRect(this.$refs.house, option => {
                    if (Math.abs(PrivateData.screenHeight-option.size.top) < 60) {
                        return;
                    }

                    let start = -this.houseHeight;
                    let change = this.houseHeight-PrivateData.houseMinHeight;
                    if (Math.abs((PrivateData.screenHeight-PrivateData.houseMinHeight)-option.size.top) <= 20) {
                        start = -PrivateData.houseMinHeight;
                        change = PrivateData.houseMinHeight;
                    }
                    Binding.bind({
                        eventType: 'timing',
                        exitExpression: {
                            origin: 't>800'
                        },
                        props: [
                            {
                                element: this.getEl(this.$refs.house),
                                property: 'transform.translateY',
                                expression: {
                                    origin: "easeOutQuint(t,"+start+","+change+",800)"
                                }
                            }
                        ]
                    });
                    setTimeout(() => {
                        this.refreshing = false;
                    }, 100);
                });
            },

            // 切换房源高度
            changeAllScreen() {
                let translateY = -this.houseHeight;
                let rotate = 180;
                if (this.isAllScreen) {
                    rotate = 0;
                    translateY = -PrivateData.houseMinHeight;
                }
                this.isAllScreen = !this.isAllScreen;
                if (this.isAllScreen) {
                    PrivateData.isTop = true;
                    this.scrollable = true
                }else {
                    PrivateData.isTop = false;
                }
                animation.transition(this.$refs.screenBtn, {
                    styles:{
                        transform: `rotate(${rotate}deg)`,
                        transformOrigin: 'center center'
                    },
                    duration: 200,
                    timingFunction: 'ease',
                    delay: 0
                });
                animation.transition(this.$refs.house, {
                    styles:{
                        transform: `translateY(${translateY}px)`,
                        transformOrigin: 'center center'
                    },
                    duration: 400,
                    timingFunction: 'ease',
                    delay: 0
                });
            },

            markerPageTo(markerId) {
                let info = {};
                let newMarkers = [];
                for (let item of this.markers) {
                    item.callout.bgColor = "#ffffff";
                    item.callout.color = "#101d36";
                    if (markerId == item.id) {
                        item.callout.bgColor = "#fc7533";
                        item.callout.color = "#ffffff";
                        info = item;
                        continue;
                    }

                    newMarkers.push(item);
                }
                this.markers = newMarkers;
                newMarkers.push(info);
                this.markers = newMarkers;

                if (PrivateData.caseType == 1 || PrivateData.caseType == 2) {
                    let mapTextKey = {
                        1: "erHouse",
                        2: "zhengZu"
                    };
                    let clickBuildInfoMapItem = this.clickBuildInfoMap[mapTextKey[PrivateData.caseType]];
                    clickBuildInfoMapItem["name"] = info.callout
                        ? info.callout.content || "" : "";
                    clickBuildInfoMapItem["id"] = markerId;
                    this.clickBuildInfoMap[mapTextKey[PrivateData.caseType]] = clickBuildInfoMapItem;
                    this.upHouseListTc(true, markerId);
                    return;
                }

                // 新房
                if (PrivateData.caseType == 6 && info.id) {
                    uni.navigateTo({
                        url: "/pagesHouse/newHouseDetail/newHouseDetail?cityId="
                            + PrivateData.cityId
                            + "&buildId=" + info.id
                            + "&buildName="
                            + (info.callout ? info.callout.content || "" : "")
                    });
                }
            },
            // 弹窗房源数据
            upHouseListTc(boolean = false, markerId = "") {
                if (boolean) {
                    this.erHouseList = null;
                    this.isScrollIng = true;
                    this.haveMoreData = true;
                    PrivateData.houseListConfig[this.mapBtnType].currentPage = 1;
                    PrivateData.houseListConfig[this.mapBtnType].limit = 10;
                    PrivateData.houseListConfig[this.mapBtnType].buildId = markerId || "";
                    PrivateData.houseListConfig[this.mapBtnType].room = "";
                    let clickBuildInfoMapItem = this.clickBuildInfoMap[this.mapBtnType] || {};
                    clickBuildInfoMapItem.id = "";
                    clickBuildInfoMapItem.btnText = clickBuildInfoMapItem.defaultText;
                    this.clickBuildInfoMap[this.mapBtnType] = clickBuildInfoMapItem;
                    this.getErHouseList()
                    .then(info => {
                        this.biddBuilder = info.data.biddBuilder || {};
                        this.isScrollIng = false;
                        if (info.list.length < PrivateData.houseListConfig[this.mapBtnType].limit) {
                            this.haveMoreData = false;
                        }
                        this.erHouseList = info.list;
                        this.drawAgentInfo(info.data || {});
                    });
                }
            },
            drawAgentInfo(data = {}) {
                let biddBuilder = data.biddBuilder || {};
                let item = new HouseListAgentItem();
                item.buildName = "";
                item.buildAddress = "";
                item.buildId = PrivateData.houseListConfig[this.mapBtnType].buildId;
                item.agentHeaderImg = biddBuilder.buildOwnerPicUrl || Const.defaultHeadImg;
                item.agentName = biddBuilder.buildOwnerName || "";
                item.agentPhone = biddBuilder.buildOwnerMobile || "";
                item.isExit = biddBuilder.isExist ? biddBuilder.isExist : 0;
                item.archiveId = biddBuilder.buildOwnerArchiveId
                    ? biddBuilder.buildOwnerArchiveId + "" : "";
                item.cityId = biddBuilder.cityId || "";
                item.caseType = PrivateData.caseType;
                this.villageExpertItem = item;
            },
            dealParams(params) {
                let newParams = {};
                for (let key in params) {
                    if (params[key]) {
                        newParams[key] = params[key];
                    }
                }
                return newParams;
            },
            getErHouseList() {
                PrivateData.drawHouseListIng = true;
                return new Promise((resolve, reject) => {
                    let houseListConfig = PrivateData.houseListConfig[this.mapBtnType];
                    let dataParams = {
                        pageNum: houseListConfig.currentPage,
                        cityId: PrivateData.cityId,
                        caseType: PrivateData.caseType,
                        pageSize: houseListConfig.limit,
                        // buildId: "2032664"
                        buildId: houseListConfig.buildId
                    };
                    if (this.clickBuildInfoMap[this.mapBtnType].id) {
                        dataParams["room"] = this.clickBuildInfoMap[this.mapBtnType].id;
                    }
                    new GetListDataForMap(this.dealParams(dataParams)).send()
                    .then(res => {
                        let data = res.DATA || {};
                        let list = data.list || [];
                        PrivateData.drawHouseListIng = false;
                        resolve({list: this.drawErHouseList(list), num: (data.trueHouseNum || 0), data: data});
                    });
                });
            },
            drawErHouseList(apiList = []) {
                let erHouseList = [];
                for (let i = 0; i < apiList.length; i++) {
                    let dataItem = apiList[i] || {};
                    if (!dataItem.houseId || !dataItem.buildId) continue;

                    if (dataItem.caseType && dataItem.caseType == 9) {
                        continue;
                    }

                    let info = this.drawErHouseItem(dataItem);
                    if (info) {
                        erHouseList.push(info);
                    }
                }
                return erHouseList;
            },
            drawErHouseItem(dataItem) {
                let item = new ErHouseListItem();
                let tags = !dataItem.houseTagDesc ? []
                    : dataItem.houseTagDesc && dataItem.houseTagDesc.indexOf("|") === -1
                        ? [dataItem.houseTagDesc] : dataItem.houseTagDesc.split("|");
                if (tags.length > 3) {
                    tags = tags.slice(0, 3);
                }
                item.buildId = dataItem.buildId || "";
                item.compId = dataItem.compId || "";
                item.trueHouse = !!(dataItem.trueFlag && dataItem.trueFlag == 1);
                item.cityId = dataItem.cityId || "";
                item.caseType = dataItem.caseType || "";
                item.houseId = dataItem.houseId || "";
                item.reSource = dataItem.reSource || "";
                item.houseImg = dataItem.thumbUrl || Const.houseDefaultImg;
                item.houseTitle = dataItem.houseSubject || "";
                item.houseTing = (dataItem.houseRoom && dataItem.houseRoom != 0 ? dataItem.houseRoom + "室" : "")
                    + (dataItem.houseWei && dataItem.houseWei != 0 ? dataItem.houseWei + "卫" : "");
                item.houseArea = dataItem.houseArea || "";
                item.houseAreaUnit = dataItem.houseArea ? "m²" : "";
                item.houseName = dataItem.buildName || "";
                item.houseTotalPrice = dataItem.houseTotalPrice || "";
                item.houseTotalPriceUnit = dataItem.houseTotalPrice
                    ? (dataItem.priceUnitCn || "") : "";
                item.housePriceOfArea = dataItem.houseUnitPrice || "";
                item.housePriceOfAreaUnit = dataItem.houseUnitPrice ? "元/m²" : "";
                item.hasVr = !!(dataItem.hasPanorama && dataItem.hasPanorama > 0);
                item.hasVideo = !!(dataItem.videoNum && dataItem.videoNum > 0);
                item.houseTags = tags;
                item.houseUseage = dataItem.houseUseage || "";
                item.houseUseageCn = dataItem.houseUseageCn || "";
                return item;
            },

            // 触底加载
            onLoading() {
                this.refreshing = true;
                this.haveMoreData =  true;
                if(!this.haveMoreData) {
                    setTimeout(() => {
                        this.refreshing = false;
                    }, 200);
                    return;
                }

                PrivateData.houseListConfig[this.mapBtnType].currentPage++;
                let erHouseList = this.erHouseList || [];
                this.getErHouseList()
                .then(info => {
                    this.refreshing = false;
                    if (info.list.length === 0 ||
                        info.list.length < PrivateData.houseListConfig[this.mapBtnType].limit) {
                        // 不加延时秒崩溃
                        setTimeout(() => {
                            this.haveMoreData = false;
                        }, 500);
                        return;
                    }

                    erHouseList = erHouseList.concat(info.list);
                    this.erHouseList = erHouseList;
                })
                .catch(() => {
                    this.refreshing = false;
                });
            },

            scrollHandler(e) {
                PrivateData.contentOffsetY = e.contentOffset.y
            },
            // 根据起点终点返回方向 1向上 2向下 3向左 4向右 0未滑动
            getDirection(startx, starty, endx, endy) {
                var angx = endx - startx;
                var angy = endy - starty;
                var result = 0;
                //如果滑动距离太短
                if (Math.abs(angx) < 2 && Math.abs(angy) < 2) {
                    return result;
                }
                var angle = this.getAngle(angx, angy);
                if (angle >= -135 && angle <= -45) {
                    result = 1;
                } else if (angle > 45 && angle < 135) {
                    result = 2;
                } else if ((angle >= 135 && angle <= 180) || (angle >= -180 && angle < -135)) {
                    result = 3;
                } else if (angle >= -45 && angle <= 45) {
                    result = 4;
                }
                return result;
            },
            // 获取角度
            getAngle(angx, angy) {
                return Math.atan2(angy, angx) * 180 / Math.PI;
            },
            // 手势滑动开始
            handleTouchStart(e) {
                if (PrivateData.drawHouseListIng) return;

                PrivateData.startX = e.changedTouches[0].pageX;
                PrivateData.startY = e.changedTouches[0].pageY;
            },
            // 手势滑动结束
            handleTouchEnd(e) {
                if (PrivateData.drawHouseListIng) return;

                let endx, endy;
                endx = e.changedTouches[0].pageX;
                endy = e.changedTouches[0].pageY;
                let direction = this.getDirection(PrivateData.startX, PrivateData.startY, endx, endy);
                switch (direction) {
                    // 未滑动！
                    case 0:
                        break;
                    // 向上滑动
                    case 1:
                        if (!PrivateData.isTop) {
                            this.goTop();
                            PrivateData.isTop = true;
                            this.scrollable = true
                        }
                        break;
                    // 向下滑动
                    case 2:
                        if (PrivateData.isTop && PrivateData.contentOffsetY === 0) {
                            this.goBottom();
                            PrivateData.isTop = false;
                            this.scrollable = false
                        }
                        break;
                    // 向左
                    case 3:
                        break;

                    // 向右
                    case 4:
                        break;
                    default:
                }
            },
            // 上滑操作
            goTop() {
                let box = this.getEl(this.$refs.house);
                let topHeight = this.houseHeight;
                this.isAllScreen = true;
                animation.transition(this.$refs.screenBtn, {
                    styles:{
                        transform: `rotate(180deg)`,
                        transformOrigin: 'center center'
                    },
                    duration: 200,
                    timingFunction: 'ease',
                    delay: 0
                });
                Binding.bind({
                    eventType: 'timing',
                    exitExpression: {
                        origin: 't>800'
                    },
                    props: [{
                        element: box,
                        property: 'transform.translateY',
                        expression: {
                            origin: "easeOutQuint(t,-"+PrivateData.houseMinHeight+",-"+(topHeight-PrivateData.houseMinHeight)+",800)"
                        }
                    }]
                });
            },
            // 下滑操作
            goBottom() {
                let box = this.getEl(this.$refs.house);
                this.isAllScreen = false;
                animation.transition(this.$refs.screenBtn, {
                    styles:{
                        transform: `rotate(0deg)`,
                        transformOrigin: 'center center'
                    },
                    duration: 200,
                    timingFunction: 'ease',
                    delay: 0
                });
                Binding.bind({
                    eventType: 'timing',
                    exitExpression: {
                        origin: 't>800'
                    },
                    props: [
                        {
                            element: box,
                            property: 'transform.translateY',
                            expression: {
                                origin: "easeOutQuint(t,-"+(this.houseHeight)+","+(this.houseHeight-PrivateData.houseMinHeight)+",800)"
                            }
                        }
                    ]
                });
                setTimeout(() => {
                    this.refreshing = false;
                }, 100)
            },

            // 选择户型
            chooseHx() {
                this.showHxTc = true;
                setTimeout(() => {
                    Binding.bind({
                        eventType: 'timing',
                        exitExpression: {
                            origin: 't>800'
                        },
                        props: [
                            {
                                element: this.getEl(this.$refs.hxTc),
                                property:'opacity',
                                expression: {
                                    origin: "easeOutQuint(t,"+0+","+0.5+",800)"
                                }
                            }
                        ]
                    });
                    domModule.getComponentRect(this.$refs.houseTop, option => {
                        this.hxListTop = option.size.top+option.size.height;
                        this.showHxList = true;
                        setTimeout(() => {
                            Binding.bind({
                                eventType: 'timing',
                                exitExpression: {
                                    origin: 't>800'
                                },
                                props: [
                                    {
                                        element: this.getEl(this.$refs.hxList),
                                        property:'opacity',
                                        expression: {
                                            origin: "easeOutQuint(t,"+0+","+1+",800)"
                                        }
                                    }
                                ]
                            });
                        }, 50);
                    });
                }, 50);
            },
            // 关闭户型弹窗
            closeHxTc(callback) {
                this.showHxList = false;
                Binding.bind({
                    eventType: 'timing',
                    exitExpression: {
                        origin: 't>400'
                    },
                    props: [
                        {
                            element: this.getEl(this.$refs.hxTc),
                            property:'opacity',
                            expression: {
                                origin: "easeOutQuint(t,"+0.5+",-"+0.5+",400)"
                            }
                        }
                    ]
                }, (res) => {
                    if (res.state === "exit") {
                        this.showHxTc = false;
                        callback();
                    }
                });
            },
            // 点击户型
            clickHx(item) {
                let clickBuildInfoMapItem = this.clickBuildInfoMap[this.mapBtnType] || {};
                clickBuildInfoMapItem.id = item.id || "";
                clickBuildInfoMapItem.btnText = item.text;
                if (!item.id) {
                    clickBuildInfoMapItem.btnText = clickBuildInfoMapItem.defaultText;
                }
                this.closeHxTc(() => {
                    this.clickBuildInfoMap[this.mapBtnType] = clickBuildInfoMapItem;
                    this.haveMoreData = true;
                    this.erHouseList = null;
                    this.refreshing = false;
                    this.getErHouseList()
                    .then(info => {
                        this.biddBuilder = info.data.biddBuilder || {};
                        if (info.list.length < PrivateData.houseListConfig[this.mapBtnType].limit) {
                            this.haveMoreData = false;
                        }
                        this.erHouseList = info.list;
                    });
                });
            },


            handleTouchStartNew() {
                if (this.isInAnimation === true) {
                    if (PrivateData.gesToken != 0) {
                        Binding.unbind({
                            eventType: 'pan',
                            token: PrivateData.gesToken
                        });
                        PrivateData.gesToken = 0;
                    }
                    return
                }

                let my = this.getEl(this.$refs.house);
                let expression_y_origin = `Math.abs(y+${PrivateData.y})>=${PrivateData.houseMinHeight}?max(${-this.houseHeight},y+${PrivateData.y}):min(${-PrivateData.houseMinHeight},y+${PrivateData.y})`;
                let gesTokenObj = Binding.bind({
                    anchor: my,
                    eventType: 'pan',
                    props: [
                        {
                            element: my,
                            property: 'transform.translateY',
                            expression: expression_y_origin
                        }
                    ]
                }, (e) => {
                    if (e.state === 'end') {
                        PrivateData.y += e.deltaY;
                        this.bindTiming();
                    }
                });
                PrivateData.gesToken = gesTokenObj.token;
            },
            bindTiming: function() {
                PrivateData.isInAnimation = true;
                let my = this.getEl(this.$refs.house);
                let exit_origin = "t>600";
                let final_y;
                let changed_y;

                if (Math.abs(PrivateData.y-this.houseHeight)
                    - Math.abs(this.houseHeight-PrivateData.houseMinHeight)/2
                    > 0) {
                    changed_y = -this.houseHeight-PrivateData.y;
                    final_y = -this.houseHeight;
                    PrivateData.isAllScreen = true;
                }else {
                    changed_y = -PrivateData.houseMinHeight-PrivateData.y;
                    final_y = -PrivateData.houseMinHeight;
                    PrivateData.isAllScreen = false;
                }
                let expression_y = `easeOutElastic(t,${PrivateData.y},${changed_y},1000)`;
                let result = Binding.bind({
                    eventType: 'timing',
                    exitExpression: exit_origin,
                    props: [
                        {
                            element: my,
                            property: 'transform.translateY',
                            expression: expression_y
                        }
                    ]
                }, (e) => {
                    if (e.state === 'end' ||
                        e.state === 'exit') {
                        PrivateData.y = final_y;
                        PrivateData.isInAnimation = false;
                    }
                })
            }
        }
    }
</script>

<style>
    .cont-view{
    }
    .dragLayer {
        width: 750rpx;
        z-index: 99;
        position: fixed;
        background-color: #fff;
        border-top-left-radius: 40rpx;
        border-top-right-radius: 40rpx;
        bottom: 0;
        justify-content: flex-start;
        flex-direction: column;
        align-items: center;
    }
    .nav-view{
        z-index: 99;
        background-color: #ffffff;
        flex-direction: row;
        justify-content: center;
        width: 750rpx;
        box-sizing: border-box;
        margin-top: 26rpx;
    }
    .nav-item{
        width: 220rpx;
        height: 52rpx;
        line-height: 52rpx;
        text-align: center;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        border-bottom-width: 1px;
        border-bottom-color: #ffffff;
        border-bottom-left-radius: 25rpx;
        border-bottom-right-radius: 25rpx;
        border-top-left-radius: 25rpx;
        border-top-color: #ffffff;
        border-top-width: 1px;
        border-left-color: #ffffff;
        border-left-width: 1px;
        border-right-width: 1px;
        border-right-color: #ffffff;
        border-top-right-radius: 25rpx;
    }
    .nav-text{
        color: #777777;
        font-size: 36rpx;
        font-family: PingFang-SC-Medium;
    }
    .nav-item-active{
        border-bottom-color: #e6e6e6;
        border-top-color: #e6e6e6;
        border-left-color: #e6e6e6;
        border-right-color: #e6e6e6;
    }
    .nav-text-active{
        color: #101d36;
    }
    .btn-view{
        margin-top: 30rpx;
        margin-left: auto;
        margin-right: auto;
        width: 710rpx;
        height: 84rpx;
        line-height: 84rpx;
        background-image: linear-gradient(to bottom, #ffd900 , #ffd900 );
        border-top-right-radius: 10rpx;
        border-top-left-radius: 10rpx;
        border-bottom-right-radius: 10rpx;
        border-bottom-left-radius: 10rpx;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }
    .icon-btn{
        width: 40rpx;
        height: 36rpx;
        margin-top: auto;
        margin-right: 5rpx;
        margin-bottom: auto;
        margin-left: 0;
    }
    .btn-text{
        font-size: 32rpx;
        font-weight: normal;
        font-stretch: normal;
        color: #ffffff;
        height: 84rpx;
        line-height: 84rpx;
        text-align: center;
    }

    /*房源*/
    .house-cont{
        z-index: 120;
        width: 750rpx;
        position: fixed;
        background-color: #fff;
        border-top-left-radius: 40rpx;
        border-top-right-radius: 40rpx;
        bottom: 0;
        justify-content: flex-start;
        flex-direction: column;
        align-items: center;
        padding-left: 40rpx;
        padding-right: 40rpx;
        box-sizing: border-box;
    }
    .house-top{
        position: relative;
        background-color: #fff;
        width: 670rpx;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        height: 120rpx;
        line-height: 120rpx;
        border-bottom-color: #ececec;
        border-bottom-width: 1rpx;
        box-sizing: border-box;
        z-index: 120;
    }
    .house-name{
        font-size: 44rpx;
        color: #101d36;
        text-align: left;
        width: 290rpx;
        max-width: 290rpx;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        lines:1;
    }
    .house-hx{
        flex-direction: row;
        justify-content: flex-end;
        align-items: center;
    }
    .house-hx-text{
        font-size: 26rpx;
        color: #fc7533;
        text-align: right;
    }
    .house-hx-img{
        width: 18rpx;
        height: 10.5rpx;
        margin-left: 4rpx;
        transform: rotate(180deg);
    }
    .house-more-down-view{
        position: absolute;
        left: 335rpx;
        top: 0;
        margin-left: -40rpx;
        height: 120rpx;
        width: 80rpx;
        flex-shrink: 0;
        justify-content: center;
        align-items: center;
    }
    .house-more-down{
        width: 32rpx;
        height: 12rpx;
        flex-shrink: 0;
    }
    .house-info{
        width: 670rpx;
    }

    /*暂无数据*/
    .no-data-view{
        width: 670rpx;
        align-items: center;
    }
    .no-data-img{
        width: 198rpx;
        height: 202rpx;
        margin-top: 60rpx;
    }
    .no-data-text{
        text-align: center;
        color: #8C8C8C;
        font-size: 26rpx;
    }

    /*上滑加载*/
    .load-more{
        flex-direction: row;
        justify-content: center;
        align-items: center;
        height: 50rpx;
        line-height: 50rpx;
    }
    .indicator {
        height: 38rpx;
        width: 38rpx;
        color: blue;
        margin-right: 4rpx;
    }
    .load-more-text{
        font-size: 28rpx;
        color: #8e94a1;
        text-align: left;
    }

    /*户型弹窗*/
    .hx-view{
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: #000000;
        opacity: 0;
        z-index: 99;
    }
    .hx-list{
        position: fixed;
        right: 30rpx;
        background-color: #fff;
        font-size: 24rpx;
        width: 120rpx;
        text-align: center;
        color: #666;
        border-top-right-radius: 6rpx;
        border-top-left-radius: 6rpx;
        border-bottom-right-radius: 6rpx;
        border-bottom-left-radius: 6rpx;
        box-sizing: border-box;
        overflow: hidden;
        opacity: 0;
    }
    .hx-item {
        padding-top: 6rpx;
        padding-right: 6rpx;
        padding-bottom: 6rpx;
        padding-left: 6rpx;
        border-bottom-width: 1rpx;
        border-bottom-color: #e6e6e6;
        box-sizing: border-box;
        font-size: 24rpx;
        color: #666;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
    .hx-text{
        text-align: center;
        color: #666;
        font-size: 24rpx;
    }
    .hx_choose_active{
        color: #fc7533!important;
    }
</style>


